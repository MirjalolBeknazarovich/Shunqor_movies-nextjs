import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { Header, Hero, Row, Modal, SubscriptionPlan  } from 'src/components';
import { getList } from 'src/helpers/lists';
import { IMovie, MyList, Product } from 'src/interfaces/app.interfaces';
import { API_REQUEST } from 'src/services/api.service';
import { useInfoState } from 'src/store';


export default function Home({trending, topRated, tv_top_rated, popular, documentary, comedy, family, history,  products, subscription, list }: HomeProps):JSX.Element {

    const { modal } = useInfoState();
    
    console.log(list);
    

  if(!subscription.length) return <SubscriptionPlan products={products} /> 
  
  
  return (
    <div className={`relative min-h-screen bg-gradient-to-b from-gray-900/50 to-[#010511] ${modal && "!h-screen overflow-hidden"}`}>
      <Head>
        <title>Home - Shunqor</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="logo.svg" />
      </Head>
      <Header />      
      <main className='relative pl-4 pb-24 lg:space-y-24 lg:pl-16'>
        <Hero trending={trending} />
        <section>
          <Row title={'Top Rated'} movies={topRated} />
          <Row title={'TV Show'} movies={tv_top_rated} isBig={true} />
          {list.length ? <Row title={'My list '} movies={list} isSmall={true} /> : null }
          <Row title={'Popular'} movies={popular} isSmall={true} />
          <Row title={'Documentary'} movies={documentary} isBig={true} />
          <Row title={'Comedy'} movies={comedy} isSmall={true} />
          <Row title={'Family'} movies={family} isBig={true} />
          <Row title={'History'} movies={history} isSmall={true} />
          
        </section>
      </main>
      {modal && <Modal />}
    </div>
  )
}

export const getServerSideProps: GetServerSideProps <HomeProps> = async ({ req }) => {
  const user_id = req.cookies.user_id
  if(!user_id){
    return {
      redirect: { destination: '/auth', permanent: false }
    }
  }
  const [ trending, topRated, tvTopRated, popular, documentary, comedy, family, history, products, subscription ] = await Promise.all([
    fetch(API_REQUEST.trending).then(response => response.json()),
    fetch(API_REQUEST.top_rated).then(response => response.json()),
    fetch(API_REQUEST.tv_top_rated).then(response => response.json()),
    fetch(API_REQUEST.popular).then(response => response.json()),
    fetch(API_REQUEST.documentary).then(response => response.json()),
    fetch(API_REQUEST.comedy).then(response => response.json()),
    fetch(API_REQUEST.family).then(response => response.json()),
    fetch(API_REQUEST.history).then(response => response.json()),
    fetch(API_REQUEST.products_list).then(response => response.json()),
    fetch(`${API_REQUEST.subscription}/${user_id}`).then(response => response.json()),
  ]);

  const myList: MyList[] = await getList( user_id )

  return {
    props: {
      trending: trending.results,
      topRated: topRated.results,
      tv_top_rated: tvTopRated.results,
      popular: popular.results,
      documentary: documentary.results,
      comedy: comedy.results,
      family: family.results,
      history: history.results,
      products: products.products.data,
      subscription: subscription.subscription.data,
      list: myList.map( c => c.product ),
    }
  }
}

interface HomeProps {
  trending: IMovie[];
  topRated: IMovie[];
  tv_top_rated: IMovie[];
  popular: IMovie[];
  documentary: IMovie[];
  comedy: IMovie[];
  family: IMovie[];
  history: IMovie[];
  products: Product[];
  subscription: string[];
  list: IMovie[];
}
